{"version":3,"sources":["../../src/utils/index.ts","../../src/types.ts","../../src/moment-types/moment-subset.ts","../../src/calendar-context.tsx","../../src/overrides/general.ts","../../src/overrides/index.ts","../../src/Toolbar.tsx","../../src/Weekdays.tsx","../../src/AvailSlot.tsx","../../src/AvailSlots.tsx","../../src/DayCell.tsx","../../src/DayCells.tsx","../../src/MonthlyAvailabilityCalendar.tsx","../../src/AvailabilityCalendar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["createUtils","moment","interval","msOffset","Math","rotated","ms","datesEqual","d1","d2","blockOutPeriodsTz","shifted","ranges","r","rotateMs","range","i","foldedRangeIndex","foldedRange","filtered","a","b","rotateRangesByms","blockOutPeriods","now","tzNow","Date","timeZone","providerTimeZone","calcOffsetFromProviderTimeZoneMs","res","periodStartRoundedToDayMs","periodStart","periodEndRoundedToDayMs","periodEnd","day","period","hourStart","hourEnd","minuteStart","minuteEnd","startDate","endDate","msInHour","formatAsMonth","formatAsDateWithTime","formatAsDateJustTime","formatAsDate","shouldHideWeek","selectedDate","sameWeek","week","viewingDayAvailabilities","shouldShowWeek","availByIndex","days","d","hasAvail","avails","addBlockOutBookings","availabilitiesFromBookings","periodStartMs","roundToHour","periodStartArg","booking","lastAvailability","bookingStartMs","bookingEndMs","saveEndDate","toStartAndEnd","monthRangeForDate","start","end","monthDaysForDate","startOfMonth","endOfMonth","startOfWeek","numDays","endOfWeek","weeks","numWeeks","w","j","chunkify","endMs","msRounded","chunk","intervalLengthMs","defaultTheme","dayClassBase","dayClassSelected","dayClassHasAvailability","dayClassDefault","slotsContainerStyleShow","transition","transform","slotsContainerStyleHide","slotContainerCloseClass","slotButtonClass","toolBarStyle","flexWrap","width","minHeight","toolBarButtonsContainerClass","toolBarButtonClass","toolBarLabelClass","requestAppointmentLabel","momentSubsetStub","format","Error","startOf","endOf","add","diff","toDate","CalendarContext","React","utils","theme","useCalendarContext","useContext","CalendarContextProvider","children","useMemo","value","resolveStyle","style","styleProps","resolveClassName","className","getOverride","o","defaultSpec","_t","_u","_k","Root","internalProps","defaultComponents","ToolBar","ToolBarButton","Weekdays","DayCells","DayCell","Availabilities","AvailSlot","navigate","Toolbar","messages","localizer","label","onNavigate","overrides","getToolBarOverride","role","onClick","message","today","previous","next","disabled","ToolbarButton","getToolBarButtonOverride","onClicked","weekdays","getWeekdaysOVerride","display","justifyContent","flexDirection","weekday","key","height","marginBottom","alignItems","onAvailabilitySelected","s","getAvailOverride","minWidth","AvailSlots","handleUnselect","show","slotStepMs","slotLengthMs","getAvailsOverride","type","outline","durationMinutes","AddBookingFromAvailabilitySlots","slots","date","dayIndexInWeek","weekIndexInCalRange","availsByIndex","handleSelected","dayIndexInCalRange","isSelected","getDayCellOverride","cursor","border","getDayCellsOverride","MonthlyAvailabilityCalendar","availabilities","useState","setSelectedDate","useEffect","showWeek","AvailabilityCalendarComp","initialDate","bookings","onCalRangeChange","calRange","setCalRange","setDate","lastCalRange","useRef","startAndEnd","newDate","AvailabilityCalendar","props","App","undefined","p","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80a9c899.chunk.js","sourcesContent":["import {\r\n  Range,\r\n  MsSinceMidnightRange,\r\n  AvailabilityEvent,\r\n  Booking,\r\n} from '../types';\r\nimport { MomentCtrFunc } from '../moment-types/moment-subset';\r\n\r\nexport function createUtils(moment: MomentCtrFunc) {\r\n  function intervalLengthMs(interval: AvailabilityEvent) {\r\n    return interval.endDate.getTime() - interval.startDate.getTime();\r\n  }\r\n\r\n  function chunkify(\r\n    intervals: AvailabilityEvent[],\r\n    chunkLenMs: number,\r\n    stepLenMs: number\r\n    // shouldMerge = false\r\n  ) {\r\n    // const merged = shouldMerge ? mergeIntervals(intervals) : intervals;\r\n    const res: AvailabilityEvent[] = [];\r\n    for (const interval of intervals) {\r\n      const endMs = interval.endDate.getTime();\r\n      for (let ms = interval.startDate.getTime(); ms < endMs; ms += stepLenMs) {\r\n        // const msRounded = Math.floor(ms / (msInHour / 2.0)) * (msInHour / 2.0);\r\n        const msRounded = ms;\r\n        const chunk = {\r\n          startDate: new Date(msRounded),\r\n          endDate: new Date(Math.min(endMs, msRounded + chunkLenMs)),\r\n        };\r\n        if (intervalLengthMs(chunk) >= chunkLenMs) {\r\n          res.push(chunk);\r\n        }\r\n      }\r\n      // if (res.length > 0 && intervalLengthMs(res[res.length - 1]) < chunkLenMs) {\r\n      //   const last = res.pop();\r\n      // if (res.length > 0) {\r\n      //   // append the too-short last chunk to previous chunk if it's there\r\n      //   res[res.length - 1].endDate = (last as Interval).endDate;\r\n      // }\r\n      // }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  const msInDay = 24 * 60 * 60 * 1000;\r\n  const msInHour = 1 * 60 * 60 * 1000;\r\n  const msInMinute = 1 * 60 * 1000;\r\n  const minuteInHour = 60;\r\n\r\n  function rotateMs(ms: number, msOffset: number) {\r\n    msOffset =\r\n      msOffset > 0 ? Math.min(msInDay, msOffset) : Math.max(-msInDay, msOffset);\r\n    ms = Math.min(msInDay, Math.max(0, ms));\r\n    const rotated = ms - msOffset;\r\n    return rotated < 0 ? rotated + msInDay : rotated;\r\n  }\r\n\r\n  function rotateRangesByms(ranges: MsSinceMidnightRange[], msOffset: number) {\r\n    // make sure ranges are not overlapping\r\n    const shifted = ranges.map(r => [\r\n      rotateMs(r[0], msOffset) % msInDay,\r\n      rotateMs(r[1], msOffset) % msInDay,\r\n    ]);\r\n\r\n    // if the new \"midnight\" happens in the middle of a range, break it into 2\r\n    const foldedRangeIndices = shifted\r\n      .map((range, i) => (range[1] < range[0] ? i : -1))\r\n      .filter(i => i >= 0);\r\n    for (const foldedRangeIndex of foldedRangeIndices) {\r\n      const foldedRange = shifted[foldedRangeIndex];\r\n      shifted[foldedRangeIndex] = [-1, -1]; // mark for deletion (do not disturb indices)\r\n      shifted.push([foldedRange[0], msInDay]); //start till midnight\r\n      shifted.push([0, foldedRange[1]]); // beginning-of-day till end\r\n    }\r\n\r\n    const filtered = shifted.filter(r => r[0] >= 0);\r\n\r\n    filtered.sort((a, b) => a[0] - b[0]);\r\n\r\n    return filtered;\r\n  }\r\n\r\n  function calcOffsetFromProviderTimeZoneMs(providerTimeZone: string) {\r\n    if (!providerTimeZone) return 0;\r\n\r\n    const now = new Date();\r\n    var tzNow = new Date(\r\n      now.toLocaleString('en-US', {\r\n        timeZone: providerTimeZone,\r\n      })\r\n    );\r\n    const offsetRoundedToNearestHour =\r\n      Math.floor((tzNow.getTime() - now.getTime()) / msInHour + 0.5) * msInHour;\r\n\r\n    return offsetRoundedToNearestHour;\r\n  }\r\n\r\n  const ms_in_hour = 60 * 60 * 1000;\r\n\r\n  function roundToHour(ms: number) {\r\n    return Math.floor(ms / ms_in_hour) * ms_in_hour;\r\n  }\r\n\r\n  function formatAsDate(date: Date) {\r\n    return moment(date).format('ddd, MMM Do YYYY');\r\n  }\r\n\r\n  function formatAsDateWithTime(date: Date) {\r\n    return moment(date).format('ddd, MMM Do h:mma');\r\n  }\r\n\r\n  function formatAsDateJustTime(date: Date) {\r\n    return moment(date).format('h:mma');\r\n  }\r\n\r\n  function formatAsMonth(date: Date) {\r\n    return moment(date).format('MMM YYYY');\r\n  }\r\n\r\n  function availByIndex(days: Date[], avails: AvailabilityEvent[]) {\r\n    return (days || []).map(d => ({\r\n      hasAvail: avails.some(a => datesEqual(a.startDate, d)),\r\n    }));\r\n  }\r\n\r\n  function sameWeek(d1: Date, d2: Date) {\r\n    return datesEqual(\r\n      moment(d1)\r\n        .startOf('week')\r\n        .toDate(),\r\n      moment(d2)\r\n        .startOf('week')\r\n        .toDate()\r\n    );\r\n  }\r\n\r\n  function datesEqual(d1: Date, d2: Date) {\r\n    return (\r\n      d1 &&\r\n      d2 &&\r\n      d1.getFullYear() === d2.getFullYear() &&\r\n      d1.getMonth() === d2.getMonth() &&\r\n      d1.getDate() === d2.getDate()\r\n    );\r\n  }\r\n\r\n  function monthDaysForDate(date: Date) {\r\n    const startOfMonth = moment(date).startOf('month');\r\n    const endOfMonth = moment(date).endOf('month');\r\n    const startOfWeek = startOfMonth.startOf('week');\r\n    const endOfWeek = endOfMonth.endOf('week');\r\n    const numDays = endOfWeek.diff(startOfWeek, 'days') + 1;\r\n\r\n    const weeks = [];\r\n    const days = [];\r\n    const d = startOfWeek;\r\n\r\n    const numWeeks = Math.floor(numDays / 7);\r\n    for (let i = 0; i < numWeeks; ++i) {\r\n      const w: Date[] = [];\r\n      weeks.push(w);\r\n      for (let j = 0; j < 7; ++j) {\r\n        w.push(d.toDate());\r\n        days.push(d.toDate());\r\n        d.add(1, 'day');\r\n      }\r\n    }\r\n\r\n    return { weeks, days };\r\n  }\r\n\r\n  function shouldShowWeek(\r\n    selectedDate: Date | null,\r\n    week: Date[],\r\n    viewingDayAvailabilities: AvailabilityEvent[]\r\n  ) {\r\n    return (\r\n      !!selectedDate &&\r\n      sameWeek(selectedDate, week[0]) &&\r\n      viewingDayAvailabilities.length > 0\r\n    );\r\n  }\r\n\r\n  function shouldHideWeek(\r\n    selectedDate: Date | null,\r\n    week: Date[],\r\n    viewingDayAvailabilities: AvailabilityEvent[]\r\n  ) {\r\n    return (\r\n      selectedDate &&\r\n      !sameWeek(selectedDate, week[0]) &&\r\n      viewingDayAvailabilities.length > 0\r\n    );\r\n  }\r\n\r\n  function addBlockOutBookings(\r\n    blockOutPeriods: MsSinceMidnightRange[],\r\n    provideTimeZone: string,\r\n    bookings: Booking[],\r\n    periodStart: Date,\r\n    periodEnd: Date\r\n  ) {\r\n    const tzOffsetMs = calcOffsetFromProviderTimeZoneMs(provideTimeZone);\r\n    const blockOutPeriodsTz = rotateRangesByms(blockOutPeriods, tzOffsetMs);\r\n    const res = [...bookings];\r\n    const periodStartRoundedToDayMs = new Date(\r\n      periodStart.getFullYear(),\r\n      periodStart.getMonth(),\r\n      periodStart.getDate()\r\n    ).getTime();\r\n    const periodEndRoundedToDayMs = new Date(\r\n      periodEnd.getFullYear(),\r\n      periodEnd.getMonth(),\r\n      periodEnd.getDate()\r\n    ).getTime();\r\n    for (\r\n      let i = periodStartRoundedToDayMs;\r\n      i <= periodEndRoundedToDayMs;\r\n      i = i + msInDay\r\n    ) {\r\n      const day = new Date(i);\r\n      for (const period of blockOutPeriodsTz) {\r\n        const hourStart = Math.floor(period[0] / msInHour);\r\n        const hourEnd = Math.floor(period[1] / msInHour);\r\n        const minuteStart = Math.floor(period[0] / msInMinute) % minuteInHour;\r\n        const minuteEnd = Math.floor(period[1] / msInMinute) % minuteInHour;\r\n\r\n        res.push({\r\n          startDate: new Date(\r\n            day.getFullYear(),\r\n            day.getMonth(),\r\n            day.getDate(),\r\n            hourStart,\r\n            minuteStart\r\n          ),\r\n          endDate: new Date(\r\n            day.getFullYear(),\r\n            day.getMonth(),\r\n            day.getDate(),\r\n            hourEnd,\r\n            minuteEnd\r\n          ),\r\n        });\r\n      }\r\n\r\n      // Ensure each availability is broken up at EOD and doesn't span days\r\n      res.push({\r\n        startDate: new Date(\r\n          day.getFullYear(),\r\n          day.getMonth(),\r\n          day.getDate(),\r\n          23,\r\n          59\r\n        ),\r\n        endDate: new Date(day.getFullYear(), day.getMonth(), day.getDate(), 24),\r\n      });\r\n    }\r\n    return res;\r\n  }\r\n\r\n  function availabilitiesFromBookings(\r\n    blockOutPeriods: MsSinceMidnightRange[],\r\n    providerTimeZone: string,\r\n    bookings: Booking[],\r\n    now: Date,\r\n    periodStartArg: Date,\r\n    periodEnd: Date\r\n  ) {\r\n    const periodStartMs = Math.max(\r\n      roundToHour(now.getTime()) + ms_in_hour,\r\n      periodStartArg.getTime()\r\n    );\r\n    const periodStart = new Date(periodStartMs);\r\n    if (periodEnd.getTime() <= periodStart.getTime()) {\r\n      return [];\r\n    }\r\n    const withBlockouts = addBlockOutBookings(\r\n      blockOutPeriods,\r\n      providerTimeZone,\r\n      bookings,\r\n      periodStart,\r\n      periodEnd\r\n    );\r\n    const sorted = withBlockouts.sort(\r\n      (a, b) => a.startDate.getTime() - b.startDate.getTime()\r\n    );\r\n    // Mark the whole period available to start\r\n    const res: AvailabilityEvent[] = [\r\n      {\r\n        startDate: periodStart,\r\n        endDate: periodEnd,\r\n      },\r\n    ];\r\n    for (const booking of sorted) {\r\n      const lastAvailability = res[res.length - 1];\r\n      const bookingStartMs = booking.startDate.getTime();\r\n      const bookingEndMs = booking.endDate.getTime();\r\n      if (\r\n        !booking.startDate ||\r\n        !booking.endDate ||\r\n        bookingStartMs >= bookingEndMs\r\n      ) {\r\n        continue;\r\n      }\r\n      if (bookingStartMs < lastAvailability.startDate.getTime()) {\r\n        // move lastAvailability start date to be past booking end\r\n        lastAvailability.startDate = new Date(\r\n          Math.max(lastAvailability.startDate.getTime(), bookingEndMs)\r\n        );\r\n      } else if (bookingStartMs < lastAvailability.endDate.getTime()) {\r\n        const saveEndDate = lastAvailability.endDate;\r\n        // cut off lastAvailability before booking start\r\n        lastAvailability.endDate = new Date(bookingStartMs);\r\n        if (bookingEndMs < saveEndDate.getTime()) {\r\n          //create new availability after booking end\r\n          res.push({ startDate: new Date(bookingEndMs), endDate: saveEndDate });\r\n        }\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  function toStartAndEnd(range: Range) {\r\n    const res = {\r\n      startDate:\r\n        (range as {\r\n          start: Date;\r\n        }).start || (range as Date[])[0],\r\n      endDate:\r\n        (range as {\r\n          end: Date;\r\n        }).end || (range as Date[])[(range as Date[]).length - 1],\r\n    };\r\n    if (res.startDate.getTime() === res.endDate.getTime()) {\r\n      res.endDate = new Date(res.endDate.getTime() + msInDay);\r\n    }\r\n    return res;\r\n  }\r\n\r\n  function monthRangeForDate(d: Date) {\r\n    return {\r\n      start: moment(d)\r\n        .startOf('month')\r\n        .toDate(),\r\n      end: moment(d)\r\n        .endOf('month')\r\n        .toDate(),\r\n    };\r\n  }\r\n\r\n  return {\r\n    msInHour,\r\n    datesEqual,\r\n    formatAsMonth,\r\n    formatAsDateWithTime,\r\n    formatAsDateJustTime,\r\n    formatAsDate,\r\n    shouldHideWeek,\r\n    shouldShowWeek,\r\n    availByIndex,\r\n    addBlockOutBookings,\r\n    availabilitiesFromBookings,\r\n    toStartAndEnd,\r\n    monthRangeForDate,\r\n    monthDaysForDate,\r\n    chunkify,\r\n  };\r\n}\r\n","import { MomentCtrFunc } from './moment-types/moment-subset';\r\nimport { createUtils } from './utils';\r\nimport { CSSProperties } from 'react';\r\n\r\nexport interface CalendarTheme {\r\n  dayClassBase: string;\r\n  dayClassSelected: string;\r\n  dayClassHasAvailability: string;\r\n  dayClassDefault: string;\r\n\r\n  slotsContainerStyleShow: CSSProperties;\r\n  slotsContainerStyleHide: CSSProperties;\r\n  slotContainerCloseClass: string;\r\n  slotButtonClass: string;\r\n\r\n  toolBarStyle: CSSProperties;\r\n  toolBarButtonsContainerClass: string;\r\n  toolBarButtonClass: string;\r\n  toolBarLabelClass: string;\r\n\r\n  requestAppointmentLabel: string;\r\n}\r\n\r\nexport interface CalendarThemeProp {\r\n  dayClassBase?: string;\r\n  dayClassSelected?: string;\r\n  dayClassHasAvailability?: string;\r\n  dayClassDefault?: string;\r\n\r\n  slotsContainerStyleShow?: CSSProperties;\r\n  slotsContainerStyleHide?: CSSProperties;\r\n  slotContainerCloseClass?: string;\r\n  slotButtonClass?: string;\r\n\r\n  toolBarStyle?: CSSProperties;\r\n  toolBarButtonsContainerClass?: string;\r\n  toolBarButtonClass?: string;\r\n  toolBarLabelClass?: string;\r\n\r\n  requestAppointmentLabel?: string;\r\n}\r\n\r\nexport const defaultTheme: CalendarTheme = {\r\n  dayClassBase: 'rounded-circle',\r\n  dayClassSelected: 'border-primary',\r\n  dayClassHasAvailability: 'border-info',\r\n  dayClassDefault: 'border border-default',\r\n\r\n  slotsContainerStyleShow: {\r\n    transition: 'transform 300ms',\r\n    transform: 'scale(1)',\r\n  },\r\n  slotsContainerStyleHide: {\r\n    transition: 'transform 300ms',\r\n    transform: 'scale(0)',\r\n  },\r\n  slotContainerCloseClass: 'close',\r\n  slotButtonClass: 'btn btn-primary',\r\n\r\n  toolBarStyle: {\r\n    flexWrap: 'nowrap',\r\n    width: 350,\r\n    minHeight: 50,\r\n  },\r\n  toolBarButtonsContainerClass: 'border btn-group w-100',\r\n  toolBarButtonClass: 'btn',\r\n  toolBarLabelClass: 'btn btn-link',\r\n\r\n  requestAppointmentLabel: 'Request Appointment',\r\n};\r\n\r\nexport interface AvailabilityEvent {\r\n  startDate: Date;\r\n  endDate: Date;\r\n}\r\n\r\nexport interface Booking {\r\n  startDate: Date;\r\n  endDate: Date;\r\n}\r\n\r\nexport type NavigateAction = 'PREV' | 'NEXT' | 'TODAY' | 'DATE';\r\nexport interface Navigate {\r\n  [key: string]: NavigateAction;\r\n}\r\n\r\nexport interface ToolBarProps {\r\n  label: string;\r\n  onNavigate: (action: NavigateAction) => any;\r\n  localizer: { messages: { [key: string]: string } };\r\n}\r\n\r\nexport interface ToolBarButtonProps {\r\n  message: string;\r\n  onClicked: () => void;\r\n}\r\n\r\ntype stringOrDate = string | Date;\r\n\r\nexport type Range = Date[] | { start: stringOrDate; end: stringOrDate };\r\n\r\nexport interface AvailabilityCalendarProps {\r\n  moment: MomentCtrFunc;\r\n  theme?: CalendarThemeProp;\r\n  onCalRangeChange?: (range: Range) => any;\r\n  providerTimeZone: string;\r\n  bookings: Booking[];\r\n  initialDate: Date | null;\r\n  onAvailabilitySelected: (e: AvailabilityEvent) => any;\r\n  blockOutPeriods?: MsSinceMidnightRange[];\r\n  slotLengthMs?: number;\r\n  slotStepMs?: number;\r\n}\r\n\r\nexport interface MonthlyAvailabilityCalendarProps {\r\n  availabilities: AvailabilityEvent[];\r\n  date: Date;\r\n  style?: CSSProperties;\r\n  onAvailabilitySelected: (e: AvailabilityEvent) => any;\r\n  slotLengthMs?: number;\r\n  slotStepMs?: number;\r\n}\r\n\r\nexport interface DayCellProps {\r\n  selectedDate: Date | null;\r\n  date: Date;\r\n  dayIndexInWeek: number;\r\n  weekIndexInCalRange: number;\r\n  handleSelected: (d: Date) => any;\r\n  availsByIndex: HasAvail[];\r\n  moment: MomentCtrFunc;\r\n  utils: ReturnType<typeof createUtils>;\r\n  theme: CalendarTheme;\r\n}\r\n\r\nexport interface DayCellsProps {\r\n  week: Date[];\r\n  selectedDate: Date | null;\r\n  weekIndexInCalRange: number;\r\n  handleSelected: (date: Date) => void;\r\n  availsByIndex: {\r\n    hasAvail: boolean;\r\n  }[];\r\n\r\n  moment: MomentCtrFunc;\r\n  utils: ReturnType<typeof createUtils>;\r\n  theme: CalendarTheme;\r\n}\r\n\r\nexport interface AvailSlotsProps {\r\n  viewingDayAvailabilities: AvailabilityEvent[];\r\n  handleUnselect: () => any;\r\n  show: boolean;\r\n  onAvailabilitySelected: (e: AvailabilityEvent) => any;\r\n  slotLengthMs?: number;\r\n  slotStepMs?: number;\r\n\r\n  utils: ReturnType<typeof createUtils>;\r\n  theme: CalendarTheme;\r\n}\r\n\r\nexport interface AvailSlotProps {\r\n  theme: CalendarTheme;\r\n  onAvailabilitySelected: (e: AvailabilityEvent) => any;\r\n  s: AvailabilityEvent;\r\n  formatAsDateJustTime: (date: Date) => string;\r\n}\r\n\r\nexport interface HasAvail {\r\n  hasAvail: boolean;\r\n}\r\n\r\nexport interface Booking {\r\n  id?: string;\r\n  startDate: Date;\r\n  endDate: Date;\r\n  isBlockout?: boolean;\r\n  resourceId?: number;\r\n}\r\n\r\nexport type MsSinceMidnightRange = number[];\r\n","declare function moment1(...args: any): MomentSubset;\r\n\r\nexport type MomentCtrFunc = typeof moment1;\r\n\r\ntype RelativeTimeKey =\r\n  | 's'\r\n  | 'ss'\r\n  | 'm'\r\n  | 'mm'\r\n  | 'h'\r\n  | 'hh'\r\n  | 'd'\r\n  | 'dd'\r\n  | 'M'\r\n  | 'MM'\r\n  | 'y'\r\n  | 'yy';\r\ntype CalendarKey =\r\n  | 'sameDay'\r\n  | 'nextDay'\r\n  | 'lastDay'\r\n  | 'nextWeek'\r\n  | 'lastWeek'\r\n  | 'sameElse'\r\n  | string;\r\ntype LongDateFormatKey =\r\n  | 'LTS'\r\n  | 'LT'\r\n  | 'L'\r\n  | 'LL'\r\n  | 'LLL'\r\n  | 'LLLL'\r\n  | 'lts'\r\n  | 'lt'\r\n  | 'l'\r\n  | 'll'\r\n  | 'lll'\r\n  | 'llll';\r\n\r\ninterface Locale {\r\n  calendar(key?: CalendarKey, m?: MomentSubset, now?: MomentSubset): string;\r\n\r\n  longDateFormat(key: LongDateFormatKey): string;\r\n  invalidDate(): string;\r\n  ordinal(n: number): string;\r\n\r\n  preparse(inp: string): string;\r\n  postformat(inp: string): string;\r\n  relativeTime(\r\n    n: number,\r\n    withoutSuffix: boolean,\r\n    key: RelativeTimeKey,\r\n    isFuture: boolean\r\n  ): string;\r\n  pastFuture(diff: number, absRelTime: string): string;\r\n  set(config: Object): void;\r\n\r\n  months(): string[];\r\n  months(m: MomentSubset, format?: string): string;\r\n  monthsShort(): string[];\r\n  monthsShort(m: MomentSubset, format?: string): string;\r\n  monthsParse(monthName: string, format: string, strict: boolean): number;\r\n  monthsRegex(strict: boolean): RegExp;\r\n  monthsShortRegex(strict: boolean): RegExp;\r\n\r\n  week(m: MomentSubset): number;\r\n  firstDayOfYear(): number;\r\n  firstDayOfWeek(): number;\r\n\r\n  weekdays(): string[];\r\n  weekdays(m: MomentSubset, format?: string): string;\r\n  weekdaysMin(): string[];\r\n  weekdaysMin(m: MomentSubset): string;\r\n  weekdaysShort(): string[];\r\n  weekdaysShort(m: MomentSubset): string;\r\n  weekdaysParse(weekdayName: string, format: string, strict: boolean): number;\r\n  weekdaysRegex(strict: boolean): RegExp;\r\n  weekdaysShortRegex(strict: boolean): RegExp;\r\n  weekdaysMinRegex(strict: boolean): RegExp;\r\n\r\n  isPM(input: string): boolean;\r\n  meridiem(hour: number, minute: number, isLower: boolean): string;\r\n}\r\n\r\ninterface Duration {\r\n  clone(): Duration;\r\n\r\n  humanize(withSuffix?: boolean): string;\r\n\r\n  abs(): Duration;\r\n\r\n  as(units: Base): number;\r\n  get(units: Base): number;\r\n\r\n  milliseconds(): number;\r\n  asMilliseconds(): number;\r\n\r\n  seconds(): number;\r\n  asSeconds(): number;\r\n\r\n  minutes(): number;\r\n  asMinutes(): number;\r\n\r\n  hours(): number;\r\n  asHours(): number;\r\n\r\n  days(): number;\r\n  asDays(): number;\r\n\r\n  weeks(): number;\r\n  asWeeks(): number;\r\n\r\n  months(): number;\r\n  asMonths(): number;\r\n\r\n  years(): number;\r\n  asYears(): number;\r\n\r\n  add(inp?: DurationInputArg1, unit?: DurationInputArg2): Duration;\r\n  subtract(inp?: DurationInputArg1, unit?: DurationInputArg2): Duration;\r\n\r\n  locale(): string;\r\n  locale(locale: LocaleSpecifier): Duration;\r\n  localeData(): Locale;\r\n\r\n  toISOString(): string;\r\n  toJSON(): string;\r\n\r\n  isValid(): boolean;\r\n\r\n  /**\r\n   * @deprecated since version 2.8.0\r\n   */\r\n  lang(locale: LocaleSpecifier): MomentSubset;\r\n  /**\r\n   * @deprecated since version 2.8.0\r\n   */\r\n  lang(): Locale;\r\n  /**\r\n   * @deprecated\r\n   */\r\n  toIsoString(): string;\r\n}\r\n\r\ntype Base =\r\n  | 'year'\r\n  | 'years'\r\n  | 'y'\r\n  | 'month'\r\n  | 'months'\r\n  | 'M'\r\n  | 'week'\r\n  | 'weeks'\r\n  | 'w'\r\n  | 'day'\r\n  | 'days'\r\n  | 'd'\r\n  | 'hour'\r\n  | 'hours'\r\n  | 'h'\r\n  | 'minute'\r\n  | 'minutes'\r\n  | 'm'\r\n  | 'second'\r\n  | 'seconds'\r\n  | 's'\r\n  | 'millisecond'\r\n  | 'milliseconds'\r\n  | 'ms';\r\n\r\ntype _quarter = 'quarter' | 'quarters' | 'Q';\r\ntype _isoWeek = 'isoWeek' | 'isoWeeks' | 'W';\r\ntype _date = 'date' | 'dates' | 'D';\r\ntype DurationConstructor = Base | _quarter;\r\n\r\ntype StartOf = Base | _quarter | _isoWeek | _date | void; // null\r\n\r\ntype Diff = Base | _quarter;\r\n\r\ninterface MomentInputObject {\r\n  years?: number;\r\n  year?: number;\r\n  y?: number;\r\n\r\n  months?: number;\r\n  month?: number;\r\n  M?: number;\r\n\r\n  days?: number;\r\n  day?: number;\r\n  d?: number;\r\n\r\n  dates?: number;\r\n  date?: number;\r\n  D?: number;\r\n\r\n  hours?: number;\r\n  hour?: number;\r\n  h?: number;\r\n\r\n  minutes?: number;\r\n  minute?: number;\r\n  m?: number;\r\n\r\n  seconds?: number;\r\n  second?: number;\r\n  s?: number;\r\n\r\n  milliseconds?: number;\r\n  millisecond?: number;\r\n  ms?: number;\r\n}\r\n\r\ninterface DurationInputObject extends MomentInputObject {\r\n  quarters?: number;\r\n  quarter?: number;\r\n  Q?: number;\r\n\r\n  weeks?: number;\r\n  week?: number;\r\n  w?: number;\r\n}\r\n\r\ninterface FromTo {\r\n  from: MomentInput;\r\n  to: MomentInput;\r\n}\r\n\r\ntype MomentInput =\r\n  | MomentSubset\r\n  | Date\r\n  | string\r\n  | number\r\n  | (number | string)[]\r\n  | MomentInputObject\r\n  | void; // null | undefined\r\n\r\ntype MomentInputSubset =\r\n  | MomentSubset\r\n  | Date\r\n  | string\r\n  | number\r\n  | (number | string)[]\r\n  | MomentInputObject\r\n  | void; // null | undefined\r\n\r\ntype DurationInputArg1 =\r\n  | Duration\r\n  | number\r\n  | string\r\n  | FromTo\r\n  | DurationInputObject\r\n  | void; // null | undefined\r\ntype DurationInputArg2 = DurationConstructor;\r\ntype LocaleSpecifier = string | MomentSubset | Duration | string[] | boolean;\r\n\r\nexport interface MomentSubset extends Object {\r\n  format(format?: string): string;\r\n\r\n  startOf(unitOfTime: StartOf): MomentSubset;\r\n  endOf(unitOfTime: StartOf): MomentSubset;\r\n\r\n  add(amount?: DurationInputArg1, unit?: DurationInputArg2): MomentSubset;\r\n\r\n  diff(b: MomentInputSubset, unitOfTime?: Diff, precise?: boolean): number;\r\n\r\n  toDate(): Date;\r\n}\r\n\r\nexport const momentSubsetStub: MomentSubset = {\r\n  format: (_format?: string) => {\r\n    throw new Error('not implemented');\r\n  },\r\n\r\n  startOf: (_unitOfTime: StartOf) => {\r\n    throw new Error('not implemented');\r\n  },\r\n  endOf: (_unitOfTime: StartOf) => {\r\n    throw new Error('not implemented');\r\n  },\r\n\r\n  add: (_amount?: DurationInputArg1, _unit?: DurationInputArg2) => {\r\n    throw new Error('not implemented');\r\n  },\r\n\r\n  diff: (_b: MomentInputSubset, _unitOfTime?: Diff, _precise?: boolean) => {\r\n    throw new Error('not implemented');\r\n  },\r\n\r\n  toDate: () => {\r\n    throw new Error('not implemented');\r\n  },\r\n};\r\n","import React, { useContext, useMemo } from 'react';\r\nimport { createUtils } from './utils';\r\nimport { CalendarTheme, defaultTheme } from './types';\r\nimport { MomentCtrFunc, momentSubsetStub } from './moment-types/moment-subset';\r\n\r\nexport interface CalendarContextValue {\r\n  moment: MomentCtrFunc;\r\n  utils: ReturnType<typeof createUtils>;\r\n  theme: CalendarTheme;\r\n}\r\n\r\nexport const CalendarContext = React.createContext<CalendarContextValue>({\r\n  moment: () => momentSubsetStub,\r\n  utils: createUtils(() => momentSubsetStub),\r\n  theme: defaultTheme,\r\n});\r\n\r\nexport const useCalendarContext = () => useContext(CalendarContext);\r\n\r\nexport const CalendarContextProvider = ({ moment, theme, children }: any) => {\r\n  const utils = useMemo(() => createUtils(moment), [moment]);\r\n\r\n  return (\r\n    <CalendarContext.Provider\r\n      value={{\r\n        moment,\r\n        utils,\r\n        theme,\r\n      }}\r\n    >\r\n      {children}\r\n    </CalendarContext.Provider>\r\n  );\r\n};\r\n","import { CSSProperties } from 'react';\r\n\r\ntype StyleOrFunc<StyleProps> =\r\n  | CSSProperties\r\n  | ((p: StyleProps) => CSSProperties);\r\n\r\ntype ClassNameOrFunc<StyleProps> =\r\n  | (string | undefined)\r\n  | ((p: StyleProps) => string | undefined);\r\n\r\nexport interface OverridableComponentProps<\r\n  ComponentProps,\r\n  InternalProps,\r\n  StyleProps\r\n> {\r\n  style?: StyleOrFunc<StyleProps>;\r\n  className?: ClassNameOrFunc<StyleProps>;\r\n  Root?: React.ElementType<ComponentProps>;\r\n  internalProps?: InternalProps;\r\n}\r\n\r\nexport interface ResolvedOverride<ComponentProps, InternalProps> {\r\n  style?: CSSProperties;\r\n  className?: string;\r\n  Root?: React.ElementType<ComponentProps>;\r\n  internalProps?: InternalProps;\r\n}\r\n\r\nfunction resolveStyle<StyleProps>(\r\n  style?: StyleOrFunc<StyleProps>,\r\n  styleProps?: StyleProps\r\n) {\r\n  if (typeof style === 'function') {\r\n    return styleProps ? style(styleProps) : style({} as any);\r\n  }\r\n  return style;\r\n}\r\n\r\nfunction resolveClassName<StyleProps>(\r\n  className?: ClassNameOrFunc<StyleProps>,\r\n  styleProps?: StyleProps\r\n) {\r\n  if (typeof className === 'function') {\r\n    return styleProps ? className(styleProps) : className({} as any);\r\n  }\r\n  return className;\r\n}\r\n\r\nexport function getOverride<\r\n  O extends OverridableComponentProps<T, U, K>,\r\n  T,\r\n  U,\r\n  K\r\n>(\r\n  o: O | undefined,\r\n  defaultSpec: O,\r\n  styleProps?: K,\r\n  _t?: T,\r\n  _u?: U,\r\n  _k?: K\r\n): ResolvedOverride<T, U> {\r\n  if (o === undefined) {\r\n    return {\r\n      Root: defaultSpec.Root,\r\n      className: resolveClassName(defaultSpec.className, styleProps),\r\n      style: { ...resolveStyle(defaultSpec.style, styleProps) },\r\n      internalProps: defaultSpec.internalProps,\r\n    };\r\n  }\r\n\r\n  return {\r\n    Root: o.Root || defaultSpec.Root,\r\n    className:\r\n      resolveClassName(o.className, styleProps) ||\r\n      resolveClassName(defaultSpec.className, styleProps),\r\n    style: {\r\n      ...resolveStyle(defaultSpec.style, styleProps),\r\n      ...resolveStyle(o.style, styleProps),\r\n    },\r\n    internalProps: { ...defaultSpec.internalProps, ...o.internalProps } as U,\r\n  };\r\n}\r\n","import {\r\n  DayCellProps,\r\n  DayCellsProps,\r\n  ToolBarProps,\r\n  AvailSlotsProps,\r\n  ToolBarButtonProps,\r\n  AvailSlotProps,\r\n} from '../types';\r\nimport {\r\n  OverridableComponentProps,\r\n  ResolvedOverride,\r\n  getOverride,\r\n} from './general';\r\n\r\nconst DefaultToolBar: OverridableComponentProps<ToolBarProps, {}, {}> = {};\r\n\r\nconst DefaultToolBarButton: OverridableComponentProps<\r\n  ToolBarButtonProps,\r\n  {},\r\n  {}\r\n> = {};\r\n\r\nconst DefaultWeekdays: OverridableComponentProps<{}, {}, {}> = {};\r\n\r\nconst DefaultDayCells: OverridableComponentProps<DayCellsProps, {}, {}> = {};\r\n\r\nconst DefaultDayCell: OverridableComponentProps<\r\n  DayCellProps,\r\n  {},\r\n  { isSelected: boolean; hasAvail: boolean }\r\n> = {};\r\n\r\nconst DefaultAvailabiliies: OverridableComponentProps<\r\n  AvailSlotsProps,\r\n  {},\r\n  {}\r\n> = {};\r\n\r\nconst DefaultAvailSlot: OverridableComponentProps<AvailSlotProps, {}, {}> = {};\r\n\r\n// type ExtractComponentProps<\r\n//   Overridable\r\n// > = Overridable extends OverridableComponentProps<infer T, infer _U, infer _Z>\r\n//   ? T\r\n//   : never;\r\n// type ExtractInternalProps<\r\n//   Overridable\r\n// > = Overridable extends OverridableComponentProps<infer _T, infer U, infer _Z>\r\n//   ? U\r\n//   : never;\r\ntype ExtractStyleProps<\r\n  Overridable\r\n> = Overridable extends OverridableComponentProps<infer _T, infer _U, infer Z>\r\n  ? Z\r\n  : never;\r\n\r\nexport const defaultComponents = {\r\n  ToolBar: DefaultToolBar,\r\n  ToolBarButton: DefaultToolBarButton,\r\n  Weekdays: DefaultWeekdays,\r\n  DayCells: DefaultDayCells,\r\n  DayCell: DefaultDayCell,\r\n  Availabilities: DefaultAvailabiliies,\r\n  AvailSlot: DefaultAvailSlot,\r\n};\r\n\r\nexport type Overrides = typeof defaultComponents;\r\n\r\n// export function getOverride<Key extends keyof Overrides>(\r\n//   key: Key,\r\n//   overrides: Overrides | undefined,\r\n//   props?: ExtractInternalProps<Overrides[Key]>,\r\n//   style?: CSSProperties\r\n// ): OverridableComponentProps<\r\n//   ExtractComponentProps<Overrides[Key]>,\r\n//   ExtractInternalProps<Overrides[Key]>\r\n// > {\r\n//   if (overrides === undefined) {\r\n//     return { Component: undefined, style, props };\r\n//   }\r\n\r\n//   const o = overrides[key];\r\n\r\n//   if (o === undefined) {\r\n//     return { Component: undefined, style, props };\r\n//   }\r\n\r\n//   if (o.Component !== undefined) {\r\n//     const Component = o.Component;\r\n//     return { Component };\r\n//   }\r\n\r\n//   const oStyle = o.style;\r\n//   if (oStyle !== undefined) {\r\n//     const o2Style = oStyle;\r\n//     if (typeof o2Style === 'function') {\r\n//       const o3Style = o2Style;\r\n//       //TODO\r\n//     } else {\r\n//       return {\r\n//         Component: undefined,\r\n//         style: { ...style, ...o2Style },\r\n//         props: { ...props, ...o.props },\r\n//       };\r\n//     }\r\n//   }\r\n\r\n//   return { Component: undefined, style, props };\r\n// }\r\n\r\n// export function getOverride<Key extends keyof Overrides>(\r\n//   key: Key,\r\n//   overrides: Overrides | undefined,\r\n//   defaultSpec: OverridableComponentProps<\r\n//     ExtractComponentProps<Overrides[Key]>,\r\n//     ExtractInternalProps<Overrides[Key]>,\r\n//     ExtractStyleProps<Overrides[Key]>\r\n//   >\r\n// ): OverridableComponentProps<\r\n//   ExtractComponentProps<Overrides[Key]>,\r\n//   ExtractInternalProps<Overrides[Key]>,\r\n//   ExtractStyleProps<Overrides[Key]>\r\n// > {\r\n//   type ComponentProps = ExtractComponentProps<Overrides[Key]>;\r\n\r\n//   if (overrides === undefined || overrides[key] === undefined) {\r\n//     return {\r\n//       Component: undefined,\r\n//       style: defaultSpec.style,\r\n//       internalProps: defaultSpec.internalProps,\r\n//     };\r\n//   }\r\n\r\n//   const o = overrides[key];\r\n\r\n//   if (o.Component !== undefined) {\r\n//     return { Component: o.Component };\r\n//   }\r\n\r\n//   return {\r\n//     Component: undefined,\r\n//     style: { ...defaultSpec.style, ...o.style },\r\n//     internalProps: { ...defaultSpec.internalProps, ...o.internalProps },\r\n//   };\r\n// }\r\n\r\nexport function getToolBarOverride(\r\n  overrides: Overrides | undefined,\r\n  defaultSpec: typeof DefaultToolBar\r\n): ResolvedOverride<ToolBarProps, {}> {\r\n  const o = overrides ? overrides.ToolBar : undefined;\r\n  return getOverride(o, defaultSpec, {});\r\n}\r\n\r\nexport function getToolBarButtonOverride(\r\n  overrides: Overrides | undefined,\r\n  defaultSpec: typeof DefaultToolBarButton\r\n): ResolvedOverride<ToolBarButtonProps, {}> {\r\n  const o = overrides ? overrides.ToolBarButton : undefined;\r\n  return getOverride(o, defaultSpec, {});\r\n}\r\n\r\nexport function getWeekdaysOVerride(\r\n  overrides: Overrides | undefined,\r\n  defaultSpec: typeof DefaultWeekdays\r\n): ResolvedOverride<{}, {}> {\r\n  const o = overrides ? overrides.Weekdays : undefined;\r\n  return getOverride(o, defaultSpec, {});\r\n}\r\n\r\nexport function getDayCellsOverride(\r\n  overrides: Overrides | undefined,\r\n  defaultSpec: typeof DefaultDayCells\r\n): ResolvedOverride<DayCellsProps, {}> {\r\n  const o = overrides ? overrides.DayCells : undefined;\r\n  return getOverride(o, defaultSpec, {});\r\n}\r\n\r\nexport function getDayCellOverride(\r\n  overrides: Overrides | undefined,\r\n  defaultSpec: typeof DefaultDayCell,\r\n  styleProps?: ExtractStyleProps<typeof DefaultDayCell>\r\n): ResolvedOverride<DayCellProps, {}> {\r\n  const o = overrides ? overrides.DayCell : undefined;\r\n  return getOverride(o, defaultSpec, styleProps);\r\n}\r\n\r\nexport function getAvailsOverride(\r\n  overrides: Overrides | undefined,\r\n  defaultSpec: typeof DefaultAvailabiliies\r\n): ResolvedOverride<AvailSlotsProps, {}> {\r\n  const o = overrides ? overrides.Availabilities : undefined;\r\n  return getOverride(o, defaultSpec, {});\r\n}\r\n\r\nexport function getAvailOverride(\r\n  overrides: Overrides | undefined,\r\n  defaultSpec: typeof DefaultAvailSlot\r\n): ResolvedOverride<AvailSlotProps, {}> {\r\n  const o = overrides ? overrides.AvailSlot : undefined;\r\n  return getOverride(o, defaultSpec, {});\r\n}\r\n","import React from 'react';\r\nimport { Navigate, ToolBarProps, CalendarTheme } from './types';\r\nimport { useCalendarContext } from './calendar-context';\r\nimport {\r\n  Overrides,\r\n  getToolBarOverride,\r\n  getToolBarButtonOverride,\r\n} from './overrides';\r\n\r\nconst navigate: Navigate = {\r\n  PREVIOUS: 'PREV',\r\n  NEXT: 'NEXT',\r\n  TODAY: 'TODAY',\r\n  DATE: 'DATE',\r\n};\r\n\r\nexport const Toolbar = ({\r\n  localizer: { messages },\r\n  label,\r\n  onNavigate,\r\n  overrides,\r\n}: ToolBarProps & { overrides?: Overrides }) => {\r\n  const { theme } = useCalendarContext();\r\n\r\n  const { Root, style, className } = getToolBarOverride(overrides, {\r\n    style: theme.toolBarStyle,\r\n    className: theme.toolBarButtonsContainerClass,\r\n  });\r\n\r\n  if (Root) {\r\n    return <Root {...{ localizer: { messages }, label, onNavigate }} />;\r\n  }\r\n\r\n  return (\r\n    <div style={style} className={className} role=\"group\">\r\n      <ToolbarButton\r\n        theme={theme}\r\n        overrides={overrides}\r\n        onClick={() => onNavigate(navigate.TODAY)}\r\n        message={messages.today}\r\n      />\r\n\r\n      <ToolbarButton\r\n        theme={theme}\r\n        overrides={overrides}\r\n        onClick={() => onNavigate(navigate.PREVIOUS)}\r\n        message={messages.previous}\r\n      />\r\n\r\n      <ToolbarButton\r\n        theme={theme}\r\n        overrides={overrides}\r\n        onClick={() => onNavigate(navigate.NEXT)}\r\n        message={messages.next}\r\n      />\r\n\r\n      <button\r\n        disabled\r\n        className={theme.toolBarLabelClass}\r\n        style={{ width: 110 }}\r\n      >\r\n        <span>{label}</span>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction ToolbarButton({\r\n  message,\r\n  onClick,\r\n  overrides,\r\n  theme,\r\n}: { theme: CalendarTheme; message: string; onClick: () => void } & {\r\n  overrides?: Overrides;\r\n}) {\r\n  const { Root, style, internalProps, className } = getToolBarButtonOverride(\r\n    overrides,\r\n    {\r\n      className: theme.toolBarButtonClass,\r\n    }\r\n  );\r\n\r\n  if (Root !== undefined) {\r\n    return <Root message={message} onClicked={onClick} />;\r\n  }\r\n\r\n  return (\r\n    <button\r\n      className={className}\r\n      onClick={onClick}\r\n      style={style}\r\n      {...internalProps}\r\n    >\r\n      {message}\r\n    </button>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Overrides, getWeekdaysOVerride } from './overrides';\r\n\r\nconst weekdays = ['S', 'M', 'T', 'W', 'Th', 'F', 'Sa'];\r\n\r\nexport const Weekdays = ({ overrides }: { overrides?: Overrides }) => {\r\n  const { Root, style } = getWeekdaysOVerride(overrides, {\r\n    style: {\r\n      display: 'flex',\r\n      justifyContent: 'flex-start',\r\n      flexWrap: 'nowrap',\r\n      flexDirection: 'row',\r\n    },\r\n  });\r\n\r\n  if (Root) {\r\n    return <Root />;\r\n  }\r\n\r\n  return (\r\n    <div style={style}>\r\n      {weekdays.map(weekday => (\r\n        <div\r\n          className=\"border border-default\"\r\n          key={weekday}\r\n          style={{\r\n            height: 50,\r\n            width: 50,\r\n            marginBottom: 10,\r\n            display: 'flex',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          {weekday}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { AvailSlotProps } from './types';\r\nimport { Overrides, getAvailOverride } from './overrides';\r\n\r\nexport function AvailSlot({\r\n  theme,\r\n  onAvailabilitySelected,\r\n  s,\r\n  formatAsDateJustTime,\r\n  overrides,\r\n}: AvailSlotProps & { overrides?: Overrides }) {\r\n  const { Root, style } = getAvailOverride(overrides, {\r\n    style: { marginBottom: 10 },\r\n  });\r\n\r\n  if (Root) {\r\n    return (\r\n      <Root\r\n        {...{\r\n          theme,\r\n          onAvailabilitySelected,\r\n          s,\r\n          formatAsDateJustTime,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={style}>\r\n      <button\r\n        className={theme.slotButtonClass}\r\n        disabled={false}\r\n        // variant=\"contained\"\r\n        style={{ minWidth: 200 }}\r\n        onClick={() =>\r\n          onAvailabilitySelected({\r\n            startDate: new Date(s.startDate),\r\n            endDate: new Date(s.endDate),\r\n          })\r\n        }\r\n      >\r\n        {formatAsDateJustTime(new Date(s.startDate))}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useMemo } from 'react';\r\nimport {\r\n  AvailSlotsProps,\r\n  Booking,\r\n  AvailabilityEvent,\r\n  CalendarTheme,\r\n} from './types';\r\nimport { createUtils } from './utils';\r\nimport { AvailSlot } from './AvailSlot';\r\nimport { Overrides, getAvailsOverride } from './overrides';\r\n\r\nexport const AvailSlots: React.SFC<AvailSlotsProps & {\r\n  overrides?: Overrides;\r\n}> = ({\r\n  viewingDayAvailabilities,\r\n  handleUnselect,\r\n  onAvailabilitySelected,\r\n  show,\r\n  slotStepMs,\r\n  slotLengthMs,\r\n  utils,\r\n  theme,\r\n  overrides,\r\n}) => {\r\n  const { Root, style } = getAvailsOverride(overrides, {\r\n    style: show ? theme.slotsContainerStyleShow : theme.slotsContainerStyleHide,\r\n  });\r\n\r\n  if (Root) {\r\n    return (\r\n      <Root\r\n        {...{\r\n          viewingDayAvailabilities,\r\n          handleUnselect,\r\n          onAvailabilitySelected,\r\n          show,\r\n          slotStepMs,\r\n          slotLengthMs,\r\n          utils,\r\n          theme,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={style}>\r\n      {show && (\r\n        <div className=\"mt-2 mr-1\">\r\n          <button\r\n            type=\"button\"\r\n            className={theme.slotContainerCloseClass}\r\n            aria-label=\"Close\"\r\n            style={{ outline: 'none' }}\r\n            onClick={handleUnselect}\r\n          >\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>\r\n          <AddBookingFromAvailabilitySlots\r\n            theme={theme}\r\n            durationMinutes={60}\r\n            avails={viewingDayAvailabilities}\r\n            onAvailabilitySelected={onAvailabilitySelected}\r\n            slotLengthMs={slotLengthMs}\r\n            slotStepMs={slotStepMs}\r\n            utils={utils}\r\n            overrides={overrides}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const AddBookingFromAvailabilitySlots = ({\r\n  avails,\r\n  slotLengthMs,\r\n  slotStepMs,\r\n  onAvailabilitySelected,\r\n  theme,\r\n  utils,\r\n  overrides,\r\n}: {\r\n  avails: Booking[];\r\n  theme: CalendarTheme;\r\n  durationMinutes: number;\r\n  slotLengthMs?: number;\r\n  slotStepMs?: number;\r\n  onAvailabilitySelected: (e: AvailabilityEvent) => any;\r\n  utils: ReturnType<typeof createUtils>;\r\n} & { overrides?: Overrides }) => {\r\n  const { chunkify, msInHour, formatAsDate, formatAsDateJustTime } = utils;\r\n  const slots = useMemo(\r\n    () =>\r\n      chunkify(\r\n        avails.map(a => ({\r\n          startDate: a.startDate,\r\n          endDate: a.endDate,\r\n        })),\r\n        slotLengthMs || 1 * msInHour,\r\n        slotStepMs || 0.5 * msInHour\r\n      ),\r\n    [avails, msInHour, chunkify, slotLengthMs, slotStepMs]\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <h4>{theme.requestAppointmentLabel}</h4>\r\n      <h5>\r\n        {avails && avails.length > 0 ? formatAsDate(avails[0].startDate) : ''}\r\n      </h5>\r\n      {slots.map((s, i) => (\r\n        <AvailSlot\r\n          key={'b_' + i}\r\n          {...{\r\n            theme,\r\n            onAvailabilitySelected,\r\n            s,\r\n            formatAsDateJustTime,\r\n            overrides,\r\n          }}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { DayCellProps } from './types';\r\nimport { Overrides, getDayCellOverride } from './overrides';\r\n\r\nexport const DayCell = ({\r\n  date,\r\n  dayIndexInWeek,\r\n  weekIndexInCalRange,\r\n  availsByIndex,\r\n  selectedDate,\r\n  handleSelected,\r\n  moment,\r\n  utils,\r\n  theme,\r\n  overrides,\r\n}: DayCellProps & { overrides?: Overrides }) => {\r\n  const dayIndexInCalRange = weekIndexInCalRange * 7 + dayIndexInWeek;\r\n\r\n  const isSelected = !!selectedDate && utils.datesEqual(date, selectedDate);\r\n  const hasAvail = availsByIndex[dayIndexInCalRange].hasAvail;\r\n\r\n  const { Root, style, className } = getDayCellOverride(\r\n    overrides,\r\n    {\r\n      className:\r\n        theme.dayClassBase +\r\n        ' ' +\r\n        (selectedDate && utils.datesEqual(date, selectedDate)\r\n          ? theme.dayClassSelected\r\n          : availsByIndex[dayIndexInCalRange].hasAvail\r\n          ? theme.dayClassHasAvailability\r\n          : theme.dayClassDefault),\r\n      style: {\r\n        cursor: 'pointer',\r\n        border:\r\n          selectedDate && utils.datesEqual(date, selectedDate)\r\n            ? '4px solid'\r\n            : availsByIndex[dayIndexInCalRange].hasAvail\r\n            ? '3px solid'\r\n            : '',\r\n        height: 50,\r\n        width: 50,\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n      },\r\n    },\r\n    { isSelected, hasAvail }\r\n  );\r\n\r\n  if (Root) {\r\n    return (\r\n      <Root\r\n        {...{\r\n          date,\r\n          dayIndexInWeek,\r\n          weekIndexInCalRange,\r\n          availsByIndex,\r\n          selectedDate,\r\n          handleSelected,\r\n          moment,\r\n          utils,\r\n          theme,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={className}\r\n      style={style}\r\n      onClick={() => handleSelected(date)}\r\n    >\r\n      {moment(date).format('D')}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { DayCellsProps } from './types';\r\nimport { DayCell } from './DayCell';\r\nimport { Overrides, getDayCellsOverride } from './overrides';\r\n\r\nexport function DayCells({\r\n  week,\r\n  selectedDate,\r\n  weekIndexInCalRange,\r\n  handleSelected,\r\n  availsByIndex,\r\n  moment,\r\n  utils,\r\n  theme,\r\n  overrides,\r\n}: DayCellsProps & { overrides?: Overrides }) {\r\n  const { Root, style } = getDayCellsOverride(overrides, {\r\n    style: {\r\n      display: 'flex',\r\n      justifyContent: 'flex-start',\r\n      flexWrap: 'nowrap',\r\n      flexDirection: 'row',\r\n    },\r\n  });\r\n\r\n  if (Root) {\r\n    return (\r\n      <Root\r\n        {...{\r\n          week,\r\n          selectedDate,\r\n          weekIndexInCalRange,\r\n          handleSelected,\r\n          availsByIndex,\r\n          moment,\r\n          utils,\r\n          theme,\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={style}>\r\n      {week.map((d, j) => (\r\n        <DayCell\r\n          key={'d_' + j}\r\n          {...{\r\n            date: d,\r\n            selectedDate,\r\n            weekIndexInCalRange,\r\n            dayIndexInWeek: j,\r\n            handleSelected,\r\n            availsByIndex,\r\n            moment,\r\n            utils,\r\n            theme,\r\n            overrides,\r\n          }}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useMemo, useEffect } from 'react';\r\n\r\nimport { Weekdays } from './Weekdays';\r\nimport { MonthlyAvailabilityCalendarProps } from './types';\r\n\r\nimport { AvailSlots } from './AvailSlots';\r\nimport { DayCells } from './DayCells';\r\nimport { useCalendarContext } from './calendar-context';\r\nimport { Overrides } from './overrides';\r\n\r\nexport const MonthlyAvailabilityCalendar = ({\r\n  availabilities,\r\n  onAvailabilitySelected,\r\n  slotLengthMs,\r\n  slotStepMs,\r\n  date,\r\n  style,\r\n  overrides,\r\n}: MonthlyAvailabilityCalendarProps & { overrides?: Overrides }) => {\r\n  const { moment, theme, utils } = useCalendarContext();\r\n\r\n  const [selectedDate, setSelectedDate] = useState<Date | null>(null);\r\n\r\n  useEffect(() => {\r\n    setSelectedDate(null);\r\n  }, [date]);\r\n\r\n  const handleSelected = (date: Date) => {\r\n    if (selectedDate && utils.datesEqual(date, selectedDate)) {\r\n      setSelectedDate(null);\r\n    } else {\r\n      setSelectedDate(date);\r\n    }\r\n  };\r\n\r\n  const handleUnselect = () => {\r\n    setSelectedDate(null);\r\n  };\r\n\r\n  const { days, weeks } = useMemo(() => utils.monthDaysForDate(date), [\r\n    date,\r\n    utils,\r\n  ]);\r\n\r\n  const availsByIndex = useMemo(\r\n    () => utils.availByIndex(days, availabilities),\r\n    [days, availabilities, utils]\r\n  );\r\n\r\n  const viewingDayAvailabilities = useMemo(() => {\r\n    if (selectedDate !== null) {\r\n      return (availabilities || []).filter(({ startDate }) =>\r\n        utils.datesEqual(startDate, selectedDate)\r\n      );\r\n    } else {\r\n      return [];\r\n    }\r\n  }, [selectedDate, availabilities, utils]);\r\n\r\n  return (\r\n    <div style={{ minHeight: 368, ...style }}>\r\n      {/* render weekdays header */}\r\n      <Weekdays overrides={overrides} />\r\n\r\n      {/* render each week in cal range */}\r\n      {weeks.map((w, i) => {\r\n        const showWeek = utils.shouldShowWeek(\r\n          selectedDate,\r\n          w,\r\n          viewingDayAvailabilities\r\n        );\r\n        const hideWeek = utils.shouldHideWeek(\r\n          selectedDate,\r\n          w,\r\n          viewingDayAvailabilities\r\n        );\r\n        return hideWeek ? null : (\r\n          <React.Fragment key={'w_' + i}>\r\n            <DayCells\r\n              {...{\r\n                week: w,\r\n                selectedDate,\r\n                weekIndexInCalRange: i,\r\n                handleSelected,\r\n                availsByIndex,\r\n                moment,\r\n                utils,\r\n                theme,\r\n                overrides,\r\n              }}\r\n            />\r\n            <AvailSlots\r\n              {...{\r\n                show: showWeek,\r\n                onAvailabilitySelected,\r\n                viewingDayAvailabilities,\r\n                handleUnselect,\r\n                slotLengthMs,\r\n                slotStepMs,\r\n                utils,\r\n                theme,\r\n                overrides,\r\n              }}\r\n            />\r\n          </React.Fragment>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useMemo, useEffect, useRef } from 'react';\r\n\r\n// import { stringOrDate, NavigateAction, View } from \"react-big-calendar\";\r\n\r\nimport { Toolbar } from './Toolbar';\r\n\r\nimport {\r\n  NavigateAction,\r\n  AvailabilityCalendarProps,\r\n  Range,\r\n  defaultTheme,\r\n} from './types';\r\n\r\nimport { MonthlyAvailabilityCalendar } from './MonthlyAvailabilityCalendar';\r\nimport {\r\n  useCalendarContext,\r\n  CalendarContextProvider,\r\n} from './calendar-context';\r\nimport { Overrides } from './overrides';\r\n\r\nconst AvailabilityCalendarComp = ({\r\n  initialDate,\r\n  onAvailabilitySelected,\r\n  blockOutPeriods,\r\n  providerTimeZone,\r\n  bookings,\r\n  onCalRangeChange,\r\n  slotLengthMs,\r\n  slotStepMs,\r\n  overrides,\r\n}: Omit<Omit<AvailabilityCalendarProps, 'moment'>, 'theme'> & {\r\n  overrides?: Overrides;\r\n}) => {\r\n  const { moment, utils } = useCalendarContext();\r\n\r\n  const [now] = useState<Date>(initialDate || new Date());\r\n  const [calRange, setCalRange] = useState<Range>(utils.monthRangeForDate(now));\r\n  const [date, setDate] = useState<Date>(now);\r\n\r\n  const lastCalRange = useRef<Range | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (lastCalRange.current !== calRange) {\r\n      onCalRangeChange && onCalRangeChange(calRange);\r\n      lastCalRange.current = calRange;\r\n    }\r\n  }, [calRange, onCalRangeChange]);\r\n\r\n  const availabilities = useMemo<{ startDate: Date; endDate: Date }[]>(() => {\r\n    const startAndEnd = utils.toStartAndEnd(calRange);\r\n    return utils.availabilitiesFromBookings(\r\n      blockOutPeriods || [],\r\n      providerTimeZone,\r\n      bookings,\r\n      now,\r\n      startAndEnd.startDate,\r\n      startAndEnd.endDate\r\n    );\r\n  }, [bookings, providerTimeZone, calRange, now, blockOutPeriods, utils]);\r\n\r\n  const handleOnNavigate = (navigate: NavigateAction) => {\r\n    if (navigate === 'TODAY') {\r\n      const today = new Date();\r\n\r\n      setDate(today);\r\n      setCalRange(utils.monthRangeForDate(today));\r\n\r\n      return;\r\n    }\r\n\r\n    if (navigate !== 'NEXT' && navigate !== 'PREV') {\r\n      return;\r\n    }\r\n\r\n    const newDate = moment(date)\r\n      .add(navigate === 'NEXT' ? 1 : -1, 'month')\r\n      .toDate();\r\n\r\n    setDate(newDate);\r\n    setCalRange(utils.monthRangeForDate(newDate));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Toolbar\r\n        onNavigate={handleOnNavigate}\r\n        label={utils.formatAsMonth(date)}\r\n        localizer={{\r\n          messages: { today: 'Today', previous: 'Previous', next: 'Next' },\r\n        }}\r\n        overrides={overrides}\r\n      />\r\n      <MonthlyAvailabilityCalendar\r\n        availabilities={availabilities}\r\n        date={date}\r\n        onAvailabilitySelected={onAvailabilitySelected}\r\n        slotLengthMs={slotLengthMs}\r\n        slotStepMs={slotStepMs}\r\n        overrides={overrides}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const AvailabilityCalendar = ({\r\n  moment,\r\n  theme,\r\n  ...props\r\n}: AvailabilityCalendarProps & { overrides?: Overrides }) => {\r\n  return (\r\n    <CalendarContextProvider\r\n      moment={moment}\r\n      theme={theme ? { ...defaultTheme, ...theme } : defaultTheme}\r\n    >\r\n      <AvailabilityCalendarComp {...props} />\r\n    </CalendarContextProvider>\r\n  );\r\n};\r\n","import React, { useMemo } from 'react';\r\n\r\nimport {\r\n  AvailabilityCalendar,\r\n  AvailabilityEvent,\r\n  MsSinceMidnightRange,\r\n  Booking,\r\n  Range,\r\n  defaultComponents,\r\n} from 'react-availability-calendar';\r\nimport moment from 'moment';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './custom.scss';\r\n\r\nconst msInHour = 60 * 60 * 1000;\r\n\r\nconst App: React.FC = () => {\r\n  const now = new Date();\r\n\r\n  const onAvailabilitySelected = (a: AvailabilityEvent) =>\r\n    console.log('Availability slot selected: ', a);\r\n\r\n  const onChangedCalRange = (r: Range) =>\r\n    console.log('Calendar range selected (fetch bookings here): ', r);\r\n\r\n  const providerTimeZoneForBlockOutHours = 'America/New_York';\r\n  const blockOutPeriods: MsSinceMidnightRange[] = [\r\n    [0 * msInHour, 9 * msInHour],\r\n    [19 * msInHour, 24 * msInHour],\r\n  ];\r\n\r\n  const bookings: Booking[] = [\r\n    {\r\n      startDate: new Date(2020, 2, 1, 19),\r\n      endDate: new Date(2020, 2, 1, 20),\r\n    },\r\n    {\r\n      startDate: new Date(2020, 2, 1, 16, 30),\r\n      endDate: new Date(2020, 2, 1, 17),\r\n    },\r\n  ];\r\n\r\n  // Optional overrides to tweak appearance of various components\r\n  const overrides = useMemo(\r\n    () => ({\r\n      ...defaultComponents,\r\n      // ToolBar: { Root: (p: any) => <div>{JSON.stringify(p)}</div> },\r\n      ToolBar: {\r\n        className: 'border btn-group',\r\n        style: { minHeight: undefined },\r\n      },\r\n      ToolBarButton: {\r\n        className: 'btn btn-outline-info',\r\n        style: { outline: 'none' },\r\n      },\r\n      DayCell: {\r\n        style: (p: { isSelected: any }) =>\r\n          p.isSelected\r\n            ? { transition: 'width 200ms, height 200ms', height: 60, width: 60 }\r\n            : { transition: 'width 200ms, height 200ms' },\r\n        className: (p: { isSelected: any; hasAvail: any }) =>\r\n          p.isSelected\r\n            ? 'rounded-circle border-success'\r\n            : p.hasAvail\r\n            ? 'rounded-circle border-primary'\r\n            : 'rounded-circle border-secondary',\r\n      },\r\n    }),\r\n    []\r\n  );\r\n\r\n  return (\r\n    <div style={{ width: 350 }}>\r\n      <AvailabilityCalendar\r\n        bookings={bookings}\r\n        providerTimeZone={providerTimeZoneForBlockOutHours}\r\n        moment={moment}\r\n        initialDate={now}\r\n        onAvailabilitySelected={onAvailabilitySelected}\r\n        onCalRangeChange={onChangedCalRange}\r\n        blockOutPeriods={blockOutPeriods}\r\n        overrides={overrides}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}