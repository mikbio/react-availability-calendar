{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","now","Date","blockOutPeriods","bookings","startDate","endDate","overrides","useMemo","defaultComponents","ToolBar","className","style","minHeight","undefined","ToolBarButton","outline","Weekday","borderWidth","borderStyle","borderBottomWidth","borderRightWidth","borderColor","DayCell","p","isSelected","transition","height","width","hasAvail","providerTimeZone","moment","initialDate","onAvailabilitySelected","a","console","log","onCalRangeChange","r","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAmGeA,G,YAjFO,WACpB,IAAMC,EAAM,IAAIC,KASVC,EAA0C,CAC9C,CAAC,EAAc,OACf,CAAC,MAAe,QAGZC,EAAsB,CAC1B,CACEC,UAAW,IAAIH,KAAK,KAAM,EAAG,EAAG,IAChCI,QAAS,IAAIJ,KAAK,KAAM,EAAG,EAAG,KAEhC,CACEG,UAAW,IAAIH,KAAK,KAAM,EAAG,EAAG,GAAI,IACpCI,QAAS,IAAIJ,KAAK,KAAM,EAAG,EAAG,MAK5BK,EAAYC,mBAChB,iCACKC,IADL,CAGEC,QAAS,CACPC,UAAW,mBACXC,MAAO,CAAEC,eAAWC,IAEtBC,cAAe,CACbJ,UAAW,uBACXC,MAAO,CAAEI,QAAS,SAEpBC,QAAS,CACPL,MAAO,CACLM,YAAa,EACbC,YAAa,QACbC,kBAAmB,EACnBC,iBAAkB,EAClBC,YAAa,WAEfX,UAAW,QAEbY,QAAS,CACPX,MAAO,SAAAY,GAAC,OACNA,EAAEC,WACE,CAAEC,WAAY,4BAA6BC,OAAQ,GAAIC,MAAO,IAC9D,CAAEF,WAAY,8BACpBf,UAAW,SAAAa,GAAC,OACVA,EAAEC,WACE,gCACAD,EAAEK,SACF,gCACA,wCAGV,IAGF,OACE,yBAAKjB,MAAO,CAAEgB,MAAO,MACnB,kBAAC,IAAD,CACExB,SAAUA,EACV0B,iBA5DmC,mBA6DnCC,OAAQA,IACRC,YAAa/B,EACbgC,uBArEyB,SAACC,GAAD,OAC7BC,QAAQC,IAAI,+BAAgCF,IAqExCG,iBAnEoB,SAACC,GAAD,OACxBH,QAAQC,IAAI,kDAAmDE,IAmE3DnC,gBAAiBA,EACjBI,UAAWA,OCjFCgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.0819a6d7.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\r\n\r\nimport {\r\n  AvailabilityCalendar,\r\n  AvailabilityEvent,\r\n  MsSinceMidnightRange,\r\n  Booking,\r\n  Range,\r\n  defaultComponents,\r\n} from 'react-availability-calendar';\r\nimport moment from 'moment';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './custom.scss';\r\nimport { Overrides } from 'react-availability-calendar/dist/overrides';\r\n\r\nconst msInHour = 60 * 60 * 1000;\r\n\r\nconst App: React.FC = () => {\r\n  const now = new Date();\r\n\r\n  const onAvailabilitySelected = (a: AvailabilityEvent) =>\r\n    console.log('Availability slot selected: ', a);\r\n\r\n  const onChangedCalRange = (r: Range) =>\r\n    console.log('Calendar range selected (fetch bookings here): ', r);\r\n\r\n  const providerTimeZoneForBlockOutHours = 'America/New_York';\r\n  const blockOutPeriods: MsSinceMidnightRange[] = [\r\n    [0 * msInHour, 9 * msInHour],\r\n    [19 * msInHour, 24 * msInHour],\r\n  ];\r\n\r\n  const bookings: Booking[] = [\r\n    {\r\n      startDate: new Date(2020, 2, 1, 19),\r\n      endDate: new Date(2020, 2, 1, 20),\r\n    },\r\n    {\r\n      startDate: new Date(2020, 2, 1, 16, 30),\r\n      endDate: new Date(2020, 2, 1, 17),\r\n    },\r\n  ];\r\n\r\n  // Optional overrides to tweak appearance of various components\r\n  const overrides = useMemo<Overrides>(\r\n    () => ({\r\n      ...defaultComponents,\r\n      // ToolBar: { Root: (p: any) => <div>{JSON.stringify(p)}</div> },\r\n      ToolBar: {\r\n        className: 'border btn-group',\r\n        style: { minHeight: undefined },\r\n      },\r\n      ToolBarButton: {\r\n        className: 'btn btn-outline-info',\r\n        style: { outline: 'none' },\r\n      },\r\n      Weekday: {\r\n        style: {\r\n          borderWidth: 0,\r\n          borderStyle: 'solid',\r\n          borderBottomWidth: 1,\r\n          borderRightWidth: 1,\r\n          borderColor: '#dddddd',\r\n        },\r\n        className: 'none',\r\n      },\r\n      DayCell: {\r\n        style: p =>\r\n          p.isSelected\r\n            ? { transition: 'width 200ms, height 200ms', height: 60, width: 60 }\r\n            : { transition: 'width 200ms, height 200ms' },\r\n        className: p =>\r\n          p.isSelected\r\n            ? 'rounded-circle border-success'\r\n            : p.hasAvail\r\n            ? 'rounded-circle border-primary'\r\n            : 'rounded-circle border-secondary',\r\n      },\r\n    }),\r\n    []\r\n  );\r\n\r\n  return (\r\n    <div style={{ width: 350 }}>\r\n      <AvailabilityCalendar\r\n        bookings={bookings}\r\n        providerTimeZone={providerTimeZoneForBlockOutHours}\r\n        moment={moment}\r\n        initialDate={now}\r\n        onAvailabilitySelected={onAvailabilitySelected}\r\n        onCalRangeChange={onChangedCalRange}\r\n        blockOutPeriods={blockOutPeriods}\r\n        overrides={overrides}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}